{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "Wrangles Recipes",
  "description": "Recipes execute an automated sequence of Wrangles. Read, wrangle, write.",
  "type": "object",
  "additionalProperties": false,
  "properties": {
    "run": {
      "type": "object",
      "description": "Run actions before or after wrangling, or on failure",
      "minProperties": 1,
      "properties": {
        "on_start": {
          "type": "array",
          "description": "Run actions before the main recipe starts",
          "minItems": 1,
          "items": {
            "$ref": "#/$defs/run/items"
          }
        },
        "on_success": {
          "type": "array",
          "description": "Run actions if the recipe succeeds",
          "minItems": 1,
          "items": {
            "$ref": "#/$defs/run/items"
          }
        },
        "on_failure": {
          "type": "array",
          "description": "Run actions if the recipe fails",
          "minItems": 1,
          "items": {
            "$ref": "#/$defs/run/items"
          }
        }
      }
    },
    "read": {
      "type": "array",
      "description": "Read data from a variety of sources",
      "minItems": 1,
      "items": {
        "$ref": "#/$defs/read/items"
      }
    },
    "wrangles": {
      "type": "array",
      "description": "A list of wrangles to apply",
      "minItems": 1,
      "items": {
        "$ref": "#/$defs/wrangles/items"
      }
    },
    "write": {
      "type": "array",
      "description": "Export your wrangled data",
      "minItems": 1,
      "items": {
        "$ref": "#/$defs/write/items"
      }
    },
    "alias": {
      "type": "array",
      "description": "Placeholder to store YAML anchor values for use with aliases elsewhere in the recipe"
    }
  },
  "$defs": {
    "read": {
      "items": {
        "type": "object",
        "description": "Define import sources",
        "maxProperties": 1,
        "additionProperties": false,
        "patternProperties": {
          "^custom\\..*": {
            "type": "object",
            "description": "Use custom functions."
          }
        },
        "properties": {}
      },
      "commonProperties": {
        "if": {
          "type": "string",
          "description": "Specify a condition to determine if this will execute or not. e.g. ${variable} == 1. Recipe variables ${variable} are parameterized and may be used within the statement."
        }
      }
    },
    "wrangles": {
      "items": {
        "type": "object",
        "description": "Wrangle data to be how you need it to be",
        "additionProperties": false,
        "patternProperties": {
          "^custom\\..*": {
            "type": "object",
            "description": "Use custom functions"
          },
          "^pandas\\..*": {
            "type": "object",
            "description": "Use pandas dataframe functions"
          }
        },
        "properties": {}
      },
      "commonProperties": {
        "where": {
          "type": "string",
          "description": "Filter the data to only apply the wrangle to certain rows using an equivalent to a SQL where criteria, such as column1 = 123 OR column2 = 'abc'"
        },
        "where_special": {
          "type": "string",
          "description": "Filter the data prior to transforming it using a SQL-style where criteria, such as column1 = 123 OR column2 = 'abc'\nNote: due to the nature of this wrangle, this will remove rows from the output."
        },
        "where_params": {
          "type": ["array", "object"],
          "description": "Variables to use in conjunctions with where. This allows the query to be parameterized. This uses sqlite syntax (? or :name)"
        },
        "if": {
          "type": "string",
          "description": "Specify a condition to determine if this will execute or not. e.g. ${variable} == 1. Recipe variables ${variable} are parameterized and may be used within the statement. Additional variables 'columns', 'row_count' and 'column_count' are available."
        }
      }
    },
    "write": {
      "items": {
        "type": "object",
        "description": "Define targets to export data to",
        "additionProperties": false,
        "patternProperties": {
          "^custom\\..*": {
            "type": "object",
            "description": "Use custom functions."
          }
        },
        "properties": {}
      },
      "commonProperties": {
        "columns": {
          "type": ["array", "string"],
          "description": "Specify a subset of the columns to include.\nAccepts wildcards using * or prefix with 'regex:' to use a regex pattern.\nIndicate a column is optional with column_name?\nIf not provided, all columns will be included"
        },
        "not_columns": {
          "type": ["array", "string"],
          "description": "Specify a subset of the columns to ignore.\nAccepts wildcards using * or prefix with 'regex:' to use a regex pattern.\nIndicate a column is optional with column_name?\nIf not provided, all columns will be included"
        },
        "if": {
          "type": "string",
          "description": "Specify a condition to determine if this will execute or not. e.g. ${variable} == 1. Recipe variables ${variable} are parameterized and may be used within the statement. Additional variables 'columns', 'row_count' and 'column_count' are available."
        },
        "where": {
          "type": "string",
          "description": "Filter the data to include using an equivalent to a SQL where criteria, such as column1 = 123 OR column2 = 'a'"
        },
        "where_params": {
          "type": ["array", "object"],
          "description": "Variables to use in conjunctions with where.\nThis allows the query to be parameterized.\nThis uses sqlite syntax (? or :name)"
        },
        "order_by": {
          "type": "string",
          "description": "Order the data by one or more columns.\nUse a comma to separate multiple columns.\nUse DESC to sort in descending order.\nExample: column1 DESC, column2\nColumns with spaces should be enclosed in double quotes."
        }
      }
    },
    "run": {
      "items": {
        "type": "object",
        "description": "Run actions",
        "maxProperties": 1,
        "additionProperties": false,
        "patternProperties": {
          "^custom\\..*": {
            "type": "object",
            "description": "Use custom functions."
          }
        },
        "properties": {}
      },
      "commonProperties": {
        "if": {
          "type": "string",
          "description": "Specify a condition to determine if this will execute or not. e.g. ${variable} == 1. Recipe variables ${variable} are parameterized and may be used within the statement."
        }
      }
    },
    "misc": {
      "unit_entity_map": {
          "allOf": [
            {
              "if": {
                "properties": { "attribute_type": { "const": "area" } }
              },
              "then": {
                "properties": {
                  "desired_unit": {
                    "enum": [
                      "square meter",
                      "square yard",
                      "square foot",
                      "square inch"
                    ]
                  }
                }
              }
            },
            {
              "if": {
                "properties": { "attribute_type": { "const": "current" } }
              },
              "then": {
                "properties": {
                  "desired_unit": { "enum": ["kiloamp", "milliamp", "amp"] }
                }
              }
            },
            {
              "if": {
                "properties": { "attribute_type": { "const": "force" } }
              },
              "then": {
                "properties": {
                  "desired_unit": {
                    "enum": ["kilonewton", "newton", "pound force"]
                  }
                }
              }
            },
            {
              "if": {
                "properties": { "attribute_type": { "const": "power" } }
              },
              "then": {
                "properties": {
                  "desired_unit": {
                    "enum": ["megawatt", "kilowatt", "watt", "horsepower"]
                  }
                }
              }
            },
            {
              "if": {
                "properties": { "attribute_type": { "const": "pressure" } }
              },
              "then": {
                "properties": {
                  "desired_unit": {
                    "enum": ["kilopascal", "pascal", "psi", "bar"]
                  }
                }
              }
            },
            {
              "if": {
                "properties": { "attribute_type": { "const": "temperature" } }
              },
              "then": {
                "properties": {
                  "desired_unit": {
                    "enum": ["celsius", "fahrenheit", "kelvin", "rankine"]
                  }
                }
              }
            },
            {
              "if": {
                "properties": { "attribute_type": { "pattern": "^volume$" } }
              },
              "then": {
                "properties": {
                  "desired_unit": {
                    "enum": ["liter", "milliliter", "gallon"]
                  }
                }
              }
            },
            {
              "if": {
                "properties": {
                  "attribute_type": { "pattern": "^volumetric flow$" }
                }
              },
              "then": {
                "properties": {
                  "desired_unit": {
                    "enum": [
                      "liter per minute",
                      "gallon per minute",
                      "cubic foot per minute"
                    ]
                  }
                }
              }
            },
            {
              "if": {
                "properties": { "attribute_type": { "const": "length" } }
              },
              "then": {
                "properties": {
                  "desired_unit": {
                    "enum": [
                      "kilometer",
                      "meter",
                      "centimeter",
                      "millimeter",
                      "mile",
                      "yard",
                      "foot",
                      "inch"
                    ]
                  }
                }
              }
            },
            {
              "if": {
                "properties": { "attribute_type": { "const": "weight" } }
              },
              "then": {
                "properties": {
                  "desired_unit": {
                    "enum": ["kilogram", "gram", "milligram", "pound"]
                  }
                }
              }
            },
            {
              "if": {
                "properties": { "attribute_type": { "const": "voltage" } }
              },
              "then": {
                "properties": {
                  "desired_unit": {
                    "enum": ["kilovolt", "volt", "millivolt"]
                  }
                }
              }
            },
            {
              "if": {
                "properties": { "attribute_type": { "const": "angle" } }
              },
              "then": {
                "properties": {
                  "desired_unit": { "enum": ["degree", "radian"] }
                }
              }
            },
            {
              "if": {
                "properties": { "attribute_type": { "const": "capacitance" } }
              },
              "then": {
                "properties": {
                  "desired_unit": {
                    "enum": ["farad", "microfarad", "nanofarad"]
                  }
                }
              }
            },
            {
              "if": {
                "properties": { "attribute_type": { "const": "frequency" } }
              },
              "then": {
                "properties": {
                  "desired_unit": {
                    "enum": ["gigahertz", "megahertz", "kilohertz", "hertz"]
                  }
                }
              }
            },
            {
              "if": {
                "properties": { "attribute_type": { "const": "speed" } }
              },
              "then": {
                "properties": {
                  "desired_unit": {
                    "enum": [
                      "kph",
                      "meter per second",
                      "mph",
                      "foot per second"
                    ]
                  }
                }
              }
            },
            {
              "if": {
                "properties": { "attribute_type": { "const": "velocity" } }
              },
              "then": {
                "properties": {
                  "desired_unit": {
                    "enum": [
                      "kph",
                      "meter per second",
                      "mph",
                      "foot per second"
                    ]
                  }
                }
              }
            },
            {
              "if": {
                "properties": { "attribute_type": { "const": "charge" } }
              },
              "then": {
                "properties": {
                  "desired_unit": {
                    "enum": ["kilocoulomb", "coulomb", "millicoulomb"]
                  }
                }
              }
            },
            {
              "if": {
                "properties": {
                  "attribute_type": { "const": "data transfer rate" }
                }
              },
              "then": {
                "properties": {
                  "desired_unit": {
                    "enum": [
                      "gigabit per second",
                      "megabit per second",
                      "kilobit per second",
                      "bit per second"
                    ]
                  }
                }
              }
            },
            {
              "if": {
                "properties": {
                  "attribute_type": { "const": "electrical conductance" }
                }
              },
              "then": {
                "properties": {
                  "desired_unit": {
                    "enum": ["kilosiemens", "siemens", "millisiemens"]
                  }
                }
              }
            },
            {
              "if": {
                "properties": { "attribute_type": { "const": "inductance" } }
              },
              "then": {
                "properties": {
                  "desired_unit": {
                    "enum": ["kilohenry", "henry", "millihenry"]
                  }
                }
              }
            },
            {
              "if": {
                "properties": {
                  "attribute_type": { "const": "instance frequency" }
                }
              },
              "then": {
                "properties": {
                  "desired_unit": {
                    "enum": ["revolutions per minute", "cycles per second"]
                  }
                }
              }
            },
            {
              "if": {
                "properties": {
                  "attribute_type": { "const": "luminous flux" }
                }
              },
              "then": {
                "properties": {
                  "desired_unit": {
                    "enum": ["kilolumen", "lumen", "millilumen"]
                  }
                }
              }
            },
            {
              "if": {
                "properties": { "attribute_type": { "const": "energy" } }
              },
              "then": {
                "properties": {
                  "desired_unit": {
                    "enum": [
                      "kilojoule",
                      "joule",
                      "millijoule",
                      "Calorie",
                      "british thermal unit",
                      "kWh"
                    ]
                  }
                }
              }
            }
          ]
      }
    }
  }
}