from wrangles.connectors.netsuite import read

# pytest
class MockResponse:
    def __init__(self, json_data, status_code):
        self.json_data = json_data
        self.status_code = status_code

    def json(self):
        return self.json_data


def test_read(mocker):
    """
    Test a successful request
    # https://system.netsuite.com/help/helpcenter/en_US/APIs/REST_API_Browser/record/v1/2023.1/index.html#/definitions/customer
    """
    mock_request = mocker.patch('requests.get')
    mock_request.return_value = MockResponse(
        json_data={
            "count": 1,
            "hasMore": True,
            "items": [
                {
                    "endDate": "22-3-2023",
                    "entityId": "100",
                    "firstName": "customer name here",
                    "isAutogeneratedRepresentingEntity": True,
                    "isBudgetApproved": True,
                    "isInactive": True,
                },
            ],
            "links": [
                {
                    "rel": "self",
                    "href": "http://demo123.suitetalk.api.netsuite.com/services/rest/record/v1/customer/107/addressbook"
                }
            ],
            "offset": 10,
            "totalResults": 10
        },
        status_code=200
    )

    # df = read(
    #     host='example.netsuite.com',
    #     path='stuff',
    #     filter='select something',
    # )

    df = read(
        instance_id='fake', 
        client_id='fakeagain',
        certificate_id='anotherfake',
        private_key='veryfake',
        query= 'SELECT TOP 10 * FROM item'
    )

    assert (
            len(df) == 1 and
            df['entityId'][0] == "100"
    )

def test_paginated_response(mocker):
    """
    Test a request that is paginated into multiple responses
    # https://system.netsuite.com/help/helpcenter/en_US/APIs/REST_API_Browser/record/v1/2023.1/index.html#/definitions/customer
    """

    mock_request = mocker.patch('requests.get')
    mock_request.return_value = MockResponse(
        json_data={
            "count": 1,
            "hasMore": True,
            "items": [
                {
                    "endDate": "22-3-2023",
                    "entityId": "100",
                    "firstName": "customer name here",
                    "isAutogeneratedRepresentingEntity": True,
                    "isBudgetApproved": True,
                    "isInactive": True,
                },
            ],
            "links": [
                {
                    "rel": "self",
                    "href": "http://demo123.suitetalk.api.netsuite.com/services/rest/record/v1/customer/107/addressbook"
                }
            ],
            "offset": 10,
            "totalResults": 10
        },
        status_code=200
    )
    assert (

            mock_request.return_value.status_code == 200

    )


def test_failure(mocker):
    """
    Test a request where the user does not provide correct inputs.
   
    https://docs.oracle.com/en/cloud/saas/netsuite/ns-online-help/section_156570709583.html
    """

    mock_request = mocker.patch('requests.get')
    mock_request.return_value = MockResponse(
        json_data={

            "type": "https://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.4.1",
            "title": "Bad Request",
            "status": 400,
            "o:errorDetails": [
                {
                    "detail": "Error while accessing resource: You have entered an Invalid Field Value 9999 for the following field: item",
                    "o:errorCode": "INVALID_CONTENT",
                    "o:errorPath": "item.items[0].item"
                }
            ]
        },
        status_code=400
    )

    assert (
            mock_request.return_value.status_code == 400
    )